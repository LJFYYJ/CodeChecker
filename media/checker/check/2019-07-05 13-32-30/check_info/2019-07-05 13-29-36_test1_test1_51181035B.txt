#define _CRT_SECURE_NO_WARNINGS 

#include<stdio.h> 

#include<math.h> 

#include<string> 

#include<string.h> 

#include<iostream> 

#include<vector> 

#include<set> 

#include<algorithm> 

#include<time.h> 

#include<queue>  

#include<map> 

#include<limits.h> 



#define vi vector <int>  

#define ll long long 

#define ull unsigned long long 

#define ld long double

#define dd double 

#define am &



#define pi 3.141592653589793238462643383279 

#define rad 57.295779513082323 

#define sc scanf 

#define pr printf 

#define mp make_pair 

#define poo(i,a,b) for(ll i=a;i<=b;i++)

#define oop(i,a,b) for(ll i=a;i>=b;i--)

using namespace std;

namespace Help

{

	ll gcd(ll a, ll b)

	{

		while (a != 0 && b != 0)

		{

			if (a > b)

				a &= b;

			else

				b %= a;

		}

		return a + b;

	}

	void Qsort(int a[], int f, int q)

	{

		int l = f, r = q, x = a[(f + q) / 2], c;



		if (f >= q) return;

		while (l <= r)

		{

			while (a[l] < x)

				l++;

			while (a[r] > x)

				r--;

			if (l <= r)

			{

				swap(a[l], a[r]);

				l++;

				r--;

			}



		}

		Qsort(a, f, r);

		Qsort(a, l, q);

	}

	void Qsort(ll a[], int f, int q)

	{

		ll l = f, r = q, x = a[(f + q) / 2], c;



		if (f >= q) return;

		while (l <= r)

		{

			while (a[l] < x)

				l++;

			while (a[r] > x)

				r--;

			if (l <= r)

			{

				swap(a[l], a[r]);

				l++;

				r--;

			}



		}

		Qsort(a, f, r);

		Qsort(a, l, q);

	}

	int binsearch(int n, int a[], int h)

	{

		int l = 0, r = h, c = n;

		while (l < r - 1)

		{

			c = (l + r) / 2;

			if (n < a[c])

				r = c;

			else l = c;

		}

		if (a[l] == n)

			return l + 1;

		else return -1;

	}

	bool isPrime(ll a)

	{

		ll i;

		if (a % 2 == 0)

			return 0;

		else

			for (i = 3; i * i <= a; i += 2)

				if (a % i == 0)

					return 0;

		return 1;

	}

};

int main()

{

	int a[5000],  co=0, m,n;

	sc("%d%d",am n,am m);

	a[m - 1] = 1;

	if (m <= n / 2)

	{

		if (m == 1)

		{

			co = 6;

			co += 3 * (n - 2);

		}

		else

		{

			co = 6;

			co += (m - 2) * 3;

			co += (n - m) * 3;

			co += m-1;



		}

	}

	else

	{

		if (m == n)

		{

			co = 6;

			co += 3 * (n - 2);

		}

		else

		{

			co = 6;

			co += (n-m-1) * 3;

			co += (m-1) * 3;

			co += n-m;

		}

	

	}

	pr("%d",co);

	return 0;

}

