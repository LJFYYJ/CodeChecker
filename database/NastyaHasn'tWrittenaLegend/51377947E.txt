#include<bits/stdc++.h>

using namespace std;

typedef long long ll;

const ll mod=1e9+7;

const int maxn=2e5+50;

const ll inf=1e17;

typedef unsigned long long ull;



int n,m;

ll a[maxn],k[maxn],ks[maxn];

struct SegTree{

    ll sum[maxn<<2],flag[maxn<<2];

    void build(int o,int l,int r){

        flag[o]=inf;

        if(l==r){

            sum[o]=a[l]-k[l-1];return;

        }

        int mid=(l+r)/2;

        build(o<<1,l,mid);

        build(o<<1|1,mid+1,r);

        sum[o]=sum[o<<1]+sum[o<<1|1];

    }

    void push_down(int o,int l,int r){

        if(flag[o]==inf)return;

        int mid=(l+r)/2;

        flag[o<<1]=flag[o<<1|1]=flag[o];

        sum[o<<1]=flag[o]*(mid-l+1);

        sum[o<<1|1]=flag[o]*(r-mid);

        flag[o]=inf;

    }

    void update(int o,int l,int r,int ql,int qr,ll v){

        if(ql<=l&&r<=qr){

            flag[o]=v;

            sum[o]=v*(r-l+1);

            return;

        }

        int mid=(l+r)/2;

        push_down(o,l,r);

        if(ql<=mid)update(o<<1,l,mid,ql,qr,v);

        if(qr>mid)update(o<<1|1,mid+1,r,ql,qr,v);

        sum[o]=sum[o<<1]+sum[o<<1|1];

    }

    ll query(int o,int l,int r,int ql,int qr){

        if(ql<=l&&r<=qr)return sum[o];

        int mid=(l+r)/2;

        push_down(o,l,r);

        ll res=0;

        if(ql<=mid)res+=query(o<<1,l,mid,ql,qr);

        if(qr>mid)res+=query(o<<1|1,mid+1,r,ql,qr);

        return res;

    }

}segtree;

int main()

{

    scanf("%d",&n);

    for(int i=1;i<=n;i++)scanf("%lld",&a[i]);

    for(int i=1;i<n;i++)scanf("%lld",&k[i]);

    for(int i=2;i<n;i++)k[i]+=k[i-1];

    for(int i=1;i<n;i++)ks[i]=ks[i-1]+k[i];

    segtree.build(1,1,n);

    scanf("%d",&m);

    while(m--){

        char op[5];int l,r;

        scanf("%s%d%d",op,&l,&r);

        if(op[0]=='s')printf("%lld\n",segtree.query(1,1,n,l,r)+ks[r-1]-(l>=2?ks[l-2]:0));

        else{

            int L=l,R=n,mid,ans=l;

            ll sum=segtree.query(1,1,n,l,l)+r;

           // cout<<"sum="<<sum<<endl;

            while(L<=R){

                mid=(L+R)/2;

               // cout<<"mid="<<mid<<endl;

                if(sum>segtree.query(1,1,n,mid,mid)){

                    ans=mid;

                    L=mid+1;

                }

                else

                    R=mid-1;

            }

           // cout<<"ans="<<ans<<endl;

            segtree.update(1,1,n,l,ans,sum);

        }

    }

    return 0;

}