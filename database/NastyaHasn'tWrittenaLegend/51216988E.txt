#include <bits/stdc++.h>

#define end end123

#define int long long

using namespace std;



const int SQRT = 659;

const int N = 1e5 + 179;

//const int BLO = N / SQRT + 1;

int a[N];

int k[N];

int start[N];

int end[N];

int sum[N];

int pref[N];

int n, q;

int val[N];



void printb(int bid) {

	return;

	cout << "B: " << bid << " sum: " << sum[bid] << endl;

	cout << "a: ";

	for (int i = start[bid]; i <= end[bid]; i++) {

		cout << a[i] << " ";

	}

	cout << endl << "k: ";

	for (int i = start[bid]; i <= end[bid]; i++) {

		cout << k[i] << " ";

	}

	cout << endl;

}



int get_res(int l, int r) {

	int bid = l / SQRT;

	int res = 0;

	for (int i = l; i <= r; i++) {

		res += a[i];

	}

	return res;

}



void process(int bid) {

	/*

	calc:

		sum

	*/

	//cout << "process " << bid << endl;

	sum[bid] = a[start[bid]];

	for (int i = start[bid] + 1; i <= end[bid]; i++) {

		a[i] = max(a[i], a[i - 1] + k[i]);

		sum[bid] += a[i];

	}

}





signed main() {

	cin.sync_with_stdio(0);

	cin.tie(0);

	cin >> n;

	//SQRT = 316;//sqrt(n) + 5;

	for (int i = 0; i < n; i++) cin >> a[i];

	for (int i = 1; i < n; i++) cin >> k[i];

	for (int i = 1; i < n; i++) {

		pref[i] = pref[i - 1] + k[i];

	}

	int last = (n - 1) / SQRT + 1;

	for (int i = 0; i < last; i++) {

		if (i == 0) start[i] = 0;

		else start[i] = end[i - 1] + 1;

		end[i] = min(n - 1, start[i] + SQRT - 1);

		val[i] = 0;

		for (int j = start[i] + 1; j <= end[i]; j++) {

			val[i] += k[j] * (end[i] - j + 1);

		}

		process(i);

		printb(i);

	}



	//cout << "QUERIES " << endl;



	cin >> q;

	while (q --> 0) {

		char c;

		cin >> c;

		if (c == '+') {

			int pos, val1;

			cin >> pos >> val1;

			--pos;

			int kid = pos / SQRT;

			process(kid);

			a[pos] += val1;

			process(kid);

			printb(kid);



			//cout << "---- " << endl;

			int u = kid;

			for (int bid = kid + 1; bid <= last; bid++) {

				//cout << "loop: " << bid << endl;

				if (bid == last) {

					u = last - 1;

					break;

				}

				//cout << a[start[bid]] << " " << a[pos] << " " << (pref[start[bid]] - pref[pos]) << endl;

				if (a[start[bid]] >= a[pos] + (pref[start[bid]] - pref[pos])) {

					u = bid - 1;

					//cout << "branch 1"<< endl;

					break;

				}/* else {

				}

				*/

			}

			//cout 

			for (int bid = kid + 1; bid < u; bid++) {

				a[start[bid]] = a[pos] + (pref[start[bid]] - pref[pos]);

				sum[bid] = a[start[bid]] * (end[bid] - start[bid] + 1) + val[bid];

				printb(bid);

				//cout << "val: " << val[bid] << endl;

				//cout << 

			}



			if (u != kid) {

				a[start[u]] = max(a[start[u]], a[pos] + (pref[start[u]] - pref[pos]));

				//cout << "process u: " << u << endl;

				process(u);

				printb(u);

			}

		} else {

			int res = 0;

			int l, r;

			cin >> l >> r;

			l--, r--;

			int bs = l / SQRT;

			int be = r / SQRT;

			process(bs);

			process(be);



			if (bs == be) {

				res += get_res(l, r);

			} else {

				res += get_res(l, end[bs]);

				res += get_res(start[be], r);

				for (int bid = bs + 1; bid < be; bid++) {

					res += sum[bid];

				}

			}

			cout << res << endl;

		}

		//cout << endl << endl;

	}

}



/*

3

1 2 3

1 -1

3

s 2 3

+ 1 2

s 1 2



2

-2 2

-2

2

+ 1 1

s 1 2





4

0 0 -1 0

-4 -5 -4

2

+ 3 2

s 4 4



4

1 -2 2 2

-5 1 -1

3

+ 2 1

+ 4 2

s 3 4



4

2 -2 -2 -1

-5 -1 1

2

+ 1 -1

s 4 4



5

2 -1 -1 -2 2

-3 0 -1 -1

2

+ 1 2

s 4 5



4

-2 2 2 -2

-5 -2 -5

2

+ 3 2

s 4 4





12

-7 8 -8 -1 -7 -1 -8 6 7 1 -4 -6

-1 -16 5 -10 -7 -11 -13 -11 -10 -15 -2

2

+ 2 6

s 2 9



5

-2 6 2 -1 -7

5 -6 -4 -8

2

+ 2 8

s 1 5



12

-7 5 -8 6 3 8 -7 4 -8 4 -4 -4

2 -14 -14 -5 -7 -15 10 -14 11 -13 -10

2

+ 6 8

s 3 10

*/