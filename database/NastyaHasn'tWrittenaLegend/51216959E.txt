#include <bits/stdc++.h>

typedef long long ll ;

using namespace std;



const int N = 1e5 + 1 ;



int n ;

vector < int > a , k ;



struct node{

    ll sum , mx ;

    ll lazy ;

    node(){sum = lazy = 0 , mx = INT_MIN;}

    node(ll sum , ll mx , ll lazy) : sum(sum) , mx(mx) , lazy(lazy) {}

}tree[N << 2];



void merge(int p){

     tree[p].sum = tree[2 * p].sum + tree[2 * p + 1].sum ;

}



void build(int s = 0 , int e = n - 1 , int p = 1){



     if(s == e){

           tree[p].sum = a[s] ;

           return ;

     }



     build(s , (s + e)/2 , 2 * p);

     build((s + e)/2 + 1 , e , 2 * p + 1) ;

     merge(p);

}

void pushLazy(int s , int e , int p){

     if(tree[p].lazy){

          tree[p].sum = tree[p].lazy * (e - s + 1) ;

          if(s != e){

              tree[2 * p].lazy = tree[2 * p + 1].lazy = tree[p].lazy ;

          }

          tree[p].lazy = 0 ;

     }

}



void update(int l , int r , int val , int s = 0 , int e=  n - 1 , int p = 1){

    if(s > r || e < l) return ;



    pushLazy(s , e, p);

    if(s >= l && e <= r){

          tree[p].lazy = val;

          pushLazy(s , e , p);

          return ;

    }



    update(l , r , val , s  , (s + e)/2 , 2 * p);

    update(l , r,  val,  (s + e)/2 + 1 , e , 2 * p + 1);

    merge(p);

}



void setPos(int i , int val ,  int s = 0 , int e = n - 1 , int p = 1){



     pushLazy(s , e , p);



     if(s == e){

          tree[p].sum += val ;

          return ;

     }



     int mid = (s + e)/2 ;



     if(i <= mid)

          setPos(i , val ,  s , mid , 2 * p);

     else

          setPos(i , val ,  mid + 1 , e , 2 * p + 1);



     merge(p);

}



ll RSQ(int l , int r , int s = 0 , int e = n - 1 , int p = 1){

    if(s > r || e < l) return 0 ;

    pushLazy(s , e , p);

    if(s >= l && e <= r) return tree[p].sum ;

    return RSQ(l , r , s , (s + e)/2 , 2 * p) + RSQ(l , r , (s + e)/2 + 1 , e , 2 * p + 1);

}





int main() {



    ios::sync_with_stdio(false) , cin.tie(0) , cout.tie(0) ;



    cin >> n ;



    for(int i = 0 ; i < n ; i++){

          int x ; cin >> x;

          a.push_back(x);

    }



    vector < int > pre ;



    for(int i = 0 ; i < n - 1 ; i++){

          int x ; cin >> x;

          k.push_back(x);

          if(!i) pre.push_back(x);

          else pre.push_back(pre.back() + x);

    }



    int q ; cin >> q ;



    build();





    while(q--){



         char t ; cin >> t ;



         if(t == 's'){

              int l , r ;

              cin >> l >> r ;

              l-- , r-- ;

              cout << RSQ(l , r) << endl ;

         }

         else{

             int i , val ;

             cin >> i >> val ;

             i-- ;



             setPos(i , val);



             ll Ai = RSQ(i , i);



             int l = i + 1 , r = n - 1 , j = -1 ;



             while(l <= r){

                  int mid = (l + r)/2 ;

                  if(Ai > RSQ(mid , mid) - ( (mid ? pre[mid - 1] : 0) - (i ? pre[i - 1] : 0)) )

                       j = mid , l = mid + 1;

                  else

                       r = mid - 1;

             }



             if(i + 1 > j) continue ;

             update(i + 1 , j , Ai + k[i]);

         }

    }



    return 0;

}

