#include <bits/stdc++.h>

using namespace std;



typedef long long ll;

const int maxn=9e5+7;

const int inf=INT_MAX;

const ll inff=1e18;

const ll mod=1e9+7;

#define pii pair<int,int>

#define mkp make_pair

#define F first

#define S second

#define pb push_back

#define sz(v) ((int)(v).size())

#define all(v) (v).begin(),(v).end()

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

#define int ll

#define endl '\n'



int seg[maxn],tag[maxn];

int n,q;

int leftover[maxn],Next[maxn],who[maxn],a[maxn];

set<int> s;



void push(int node,int l,int r)

{

    if (tag[node]==0) return;

    int m=(l+r)>>1;

    if (l!=r)

    {

        tag[node*2]+=tag[node];

        tag[node*2+1]+=tag[node];

        seg[node*2]+=tag[node]*(m-l+1);

        seg[node*2+1]+=tag[node]*(r-m);

    }

    tag[node]=0;

}



void modify(int node,int l,int r,int ql,int qr,int v)

{

    if (l>qr||r<ql) return;

    else if (l>=ql&&r<=qr)

    {

        tag[node]+=v;

        seg[node]+=v*(r-l+1);

        return;

    }

    push(node,l,r);

    int m=(l+r)>>1;

    modify(node*2,l,m,ql,qr,v);

    modify(node*2+1,m+1,r,ql,qr,v);

    seg[node]=seg[node*2]+seg[node*2+1];

}



int query(int node,int l,int r,int ql,int qr)

{

    if (l>qr||r<ql) return 0ll;

    else if (l>=ql&&r<=qr)

    {

        return seg[node];

    }

    push(node,l,r);

    int m=(l+r)>>1;

    return query(node*2,l,m,ql,qr)+query(node*2+1,m+1,r,ql,qr);

}



int32_t main()

{

    IOS

    cin>>n;

    for (int i=1;i<=n;i++)

    {

        cin>>a[i];

        modify(1,1,n,i,i,a[i]);

    }

    for (int i=1;i<n;i++)

    {

        int x;

        cin>>x;

        leftover[i]=a[i+1]-a[i]-x;

        //cout<<leftover[i]<<endl;

    }

    int last=0;

    leftover[n]=999;

    s.insert(0);

    for (int i=1;i<=n;i++)

    {

        if (leftover[i]!=0)

        {

            //cout<<i<<endl;

            s.insert(i);

            Next[last]=i;

            who[i]=last;

            last=i;

        }

    }

    s.insert(n);

    Next[n]=inff;

    cin>>q;

    while (q--)

    {

        char c;

        cin>>c;

        if (c=='s')

        {

            int l,r;

            cin>>l>>r;

            cout<<query(1,1,n,l,r)<<endl;

        }

        else

        {

            int x,v;

            cin>>x>>v;

            int last=x,nex=(*(s.lower_bound(x)));

            while (1)

            {

                modify(1,1,n,last,nex,v);

                if (nex==n) break;

                last=nex+1;

                v-=leftover[nex];

                leftover[nex]=min(0ll,leftover[nex]-v);

                nex=Next[last-1];



                if (v<=0) break;

                else

                {

                    int ori=who[who[last-1]];

                    Next[ori]=last-1;

                    who[last-1]=ori;

                    s.erase(who[last-1]);

                }

            }

        }

    }

}

