#include <bits/stdc++.h>



using namespace std;



typedef int ll;



int main() {

    ios_base::sync_with_stdio(false);

    cin.tie(nullptr);

    ll n;

    cin >> n;

    vector<ll> a((size_t) n);

    for (ll i = 0; i < n; i++) {

        cin >> a[i];

    }

    vector<ll> k((size_t) n - 1);

    for (ll i = 0; i < n - 1; i++) {

        cin >> k[i];

    }

    vector<ll> b1((size_t) n + 2, 0), b2((size_t) n + 2, 0);

    auto update_single = [&](vector<ll> &b, ll i, ll x) {

        i++;

        for (; i < b.size(); i += i & -i) {

            b[i] += x;

        }

    };

    auto query_single = [&](vector<ll> &b, ll i) {

        i++;

        ll o = 0;

        for (; i > 0; i -= i & -i) {

            o += b[i];

        }

        return o;

    };

    auto update = [&](ll l, ll r, ll x) {

        update_single(b1, l, x);

        update_single(b1, r + 1, -x);

        update_single(b2, l, x * (l - 1));

        update_single(b2, r + 1, -x * r);

    };

    auto query = [&](ll i) {

        return (query_single(b1, i) * i) - query_single(b2, i);

    };

    auto query_sum = [&](ll l, ll r) {

        return query(r) - query(l - 1);

    };

    auto query_one = [&](ll i) {

        return query_sum(i, i);

    };

    for (ll i = 0; i < n; i++) {

        update(i, i, a[i]);

    }

    ll q;

    cin >> q;

    set<pair<ll, ll>> segments;

    for (ll i = 0; i < n; i++) {

        segments.emplace(i, i);

    }

    for (ll j = 0; j < q; j++) {

        char op;

        cin >> op;

        if (op == '+') {

            ll i, x;

            cin >> i >> x;

            i--;

            ll inf = (ll) 1e10;

            pair<ll, ll> current = *lower_bound(segments.rbegin(), segments.rend(), pair<ll, ll>{i, inf}, greater<>());

            if (current.first < i) {

                segments.erase(current);

                segments.emplace(current.first, i - 1);

                current = *segments.emplace(i, current.second).first;

            }

            ll first = current.first, last = -1;

            while (true) {

                update(current.first, current.second, x);

                last = current.second;

                pair<ll, ll> next;

                if (segments.find(current) == --segments.end()) {

                    segments.erase(current);

                    break;

                } else {

                    next = *++segments.find(current);

                    segments.erase(current);

                }

                if (query_one(current.second) + k[current.second] <= query_one(next.first)) {

                    break;

                }

                x = (query_one(current.second) + k[current.second]) - query_one(next.first);

                current = next;

            }

            segments.emplace(first, last);

        }

        if (op == 's') {

            ll l, r;

            cin >> l >> r;

            l--;

            r--;

            cout << query_sum(l, r) << endl;

        }

    }

    return 0;

}



