#include <bits/stdc++.h>

using namespace std;

int const N = int(1e5) + 7;
int const mod = int(1e9) + 7;

int a[N];
int k[N];
long long b[2 * N];
long long t[N];
long long pref_sum[N];


long long segm[4 * N];
long long mns[4 * N];
bool change[4 * N];
int len = 1;
int n;

void build(int v = 1, int l = 0, int r = len) {
    if(l + 1 >= r) {
        segm[v] = b[l];
        if(l < n)
            mns[v] = b[l];
        return;
    }
    int mid = (l + r) / 2;
    build(v << 1, l, mid);
    build((v << 1) + 1, mid, r);
    segm[v] = segm[v << 1] + segm[(v << 1) + 1];
    mns[v] = max(mns[v << 1], mns[(v << 1) + 1]);
}

void push(int v, int len) {
    if(change[v]) {
        segm[v << 1] = segm[v] / 2;
        segm[(v << 1) + 1] = segm[v] / 2;
        mns[v << 1] = mns[v];
        mns[(v << 1) + 1] = mns[v];
        change[v << 1] = true;
        change[(v << 1) + 1] = true;
        change[v] = false;
    }
}

void update(long long value, int ql, int qr, int v = 1, int l = 0, int r = len) {
    if(qr <= l || r <= ql)
        return;
    if(ql <= l && r <= qr) {
        segm[v] = value * (r - l);
        mns[v] = value;
        change[v] = true;
        return;
    }
    push(v, r - l);
    int mid = (l + r) / 2;
    update(value, ql, qr, v << 1, l, mid);
    update(value, ql, qr, (v << 1) + 1, mid, r);
    segm[v] = segm[v << 1] + segm[(v << 1) + 1];
    mns[v] = max(mns[v << 1], mns[(v << 1) + 1]);
}

long long query(int ql, int qr, int v = 1, int l = 0, int r = len) {
    if(qr <= l || r <= ql)
        return 0;
    if(ql <= l && r <= qr) {
        return segm[v];
    }
    push(v, r - l);
    int mid = (l + r) / 2;
    long long res = query(ql, qr, v << 1, l, mid);
    res += query(ql, qr, (v << 1) + 1, mid, r);
    segm[v] = segm[v << 1] + segm[(v << 1) + 1];
    mns[v] = max(mns[v << 1], mns[(v << 1) + 1]);
    return res;
}

int query_ind(long long value, int v = 1, int l = 0, int r = len) {
    if(l + 1 >= r)
        return l;
    push(v, r - l);
    int mid = (l + r) / 2;
    int ind;
    if(mns[(v << 1)] < value) {
        ind = query_ind(value, (v << 1) + 1, mid, r);
    }else {
        ind = query_ind(value, (v << 1), l, mid);
    }
    segm[v] = segm[v << 1] + segm[(v << 1) + 1];
    mns[v] = max(mns[v << 1], mns[(v << 1) + 1]);
    return ind;
}
int main()
{
    ios_base::sync_with_stdio(false);
    ifstream in("input.txt");
    //cin.rdbuf(in.rdbuf());
    //int n;
    cin >> n;
    for(int i = 0; i < n; ++i)
        cin >> a[i];
    for(int i = 0; i < n - 1; ++i)
        cin >> k[i];
    for(int i = 0; i < n - 1; ++i) {
        t[i + 1] += t[i] + k[i];
        b[i] = a[i] - t[i];
    }
    b[n - 1] = a[n - 1] - t[n - 1];
    for(int i = 1; i <= n; ++i) {
        pref_sum[i] = pref_sum[i - 1] + t[i - 1];
    }

    while(len < n)
        len <<= 1;
    for(int i = 0; i < 4 * N; ++i) {
        mns[i] = -(long long)(1e15) - 7;
    }

    build();
    int q;
    cin >> q;
    while(q--) {
        char type;
        cin >> type;
        if(type == '+') {
            int i, x;
            cin >> i >> x;
            --i;
            int cur_bi = query(i, i + 1);
            int r = query_ind(x + cur_bi);
            if(query(r, r + 1) > x + cur_bi)
                --r;
            update(x + cur_bi, i, min(n, r + 1));
        } else {
            int l, r;
            cin >> l >> r;
            --l;
            cout << query(l, r) + pref_sum[r] - pref_sum[l] << "\n";
        }
    }

    return 0;
}
