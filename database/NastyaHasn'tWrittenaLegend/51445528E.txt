#include <bits/stdc++.h>

#define ll long long

#define pii pair<ll, ll>

#define piii pair<ll,pair<int, int> > 

#define pll pair<ll, ll>

#define pill pair<int,ll>

#define plli pair<ll, int>

#define ull unsigned ll

#define REP(i,n) for (int i=0; i<n; i++)

#define RREP(i,n) for (int i=n-1; i>=0; i--)

#define FOR(i, a, b) for (int i=a; i<b; i++)

#define MNTO(a,b) a = min(a,(__typeof__(a))b)

#define MXTO(a,b) a = max(a,(__typeof__(a))b)

#define ALL(a) a.begin(),a.end()

#define SZ(a) a.size()

#define pb push_back

#define f first

#define s second



using namespace std;  



#define debug(x) //cerr<<#x<<" is "<<x<<endl



const int maxn = 1e5+5;

const ll inf = 1ll<<60;

const int intinf = 1<<30;

const ll mod = 1e9+7;



ll s[maxn*4],tag[maxn*4]; // Tag_set



void push(int o, int l, int r){

    if (tag[o]>-1e18){

        s[o]=(r-l+1)*tag[o];

        if (l!=r) {

            tag[o*2+1]=tag[o];

            tag[o*2+2]=tag[o];

        }

        tag[o]=-1e18;

    }

}



ll query(int l, int r, int L, int R, int o){

    if (l>R||r<L) return 0;

    push(o,l,r);

    if (l>=L&&r<=R) return s[o];

    int mid = (l+r)/2; 

    ll ql = query(l,mid,L,R,o*2+1);

    ll qr = query(mid+1,r,L,R,o*2+2);

    return (ql+qr);

}



void modify(int l, int r, int L, int R, int v, int o){

    push(o,l,r);

    if (l>R||r<L) return;

    if (l>=L&&r<=R) {

        tag[o]=v; push(o,l,r); return;

    }

    int mid = (l+r)/2;

    modify(l,mid,L,R,v,o*2+1);

    modify(mid+1,r,L,R,v,o*2+2);

    s[o]=s[o*2+1]+s[o*2+2];

}



ll tk[maxn], k[maxn], a[maxn], sum_tk[maxn];



int n; 



void MODIFY(int l, int r, int v){

    if (l>r) return;

    modify(0,n-1,l,r,v,0);

}



ll QUERY(int l, int r){

    return query(0,n-1,l,r,0);

}



void UPD(int at, int v){

    ll atval = QUERY(at,at)+v;

    MODIFY(at,at,atval); 

    int l = at+1, r = n-1;

    while (l<r){

        int mid = (l+r)/2;

        if (QUERY(mid,mid)<atval){

            l = mid+1;

        }else{

            r = mid;

        }

    }

    if (QUERY(l,l)>=atval) l--;

    MODIFY(at+1,l,atval);

}



int main(){

    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);

    fill(tag,tag+maxn*4,-1e18);

    cin>>n;

    REP(i,n) {

        cin>>a[i]; 

    }

    REP(i,n-1){

        cin>>k[i];

        tk[i]=k[i]+(i?tk[i-1]:0);

        debug(tk[i]);

    }

    REP(i,n) {

        MODIFY(i,i,a[i]-(i?tk[i-1]:0));

    }

    REP(i,n-1){

        sum_tk[i+1]=sum_tk[i]+tk[i];

        debug(sum_tk[i]);

    }

    int q; cin>>q;

    while (q--){

        char QT; cin>>QT;

        if (QT=='s'){

            int l, r; cin>>l>>r; l--; r--;

            ll re = QUERY(l,r); // Sum of a_l ... a_r - t_{l-1} ... t_{r-1}

            re += sum_tk[r]-(l?sum_tk[l-1]:0);

            cout<<re<<'\n';

        }else{

            int at, v; cin>>at>>v;  at--;

            UPD(at,v);

        }

    }

}