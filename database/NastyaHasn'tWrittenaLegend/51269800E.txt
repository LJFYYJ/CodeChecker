#include<cstdio>

#include<algorithm>

#include<cstdlib>

#include<iostream>

#include<cstring>

#include<memory.h>

#include<map>

#include<set>

#include<queue>

#define rep(i,a,b) for(int i=a;i<=b;i++)

#define per(i,a,b) for(int i=a;i>=b;i--)

using namespace std;

typedef long long LL;

struct IO_Tp

{

	#define endl '\n'

    static const int _I_Buffer_Size = 1 << 24;

    char _I_Buffer[_I_Buffer_Size];

    char* _I_pos;



    static const int _O_Buffer_Size = 1 << 24;

    char _O_Buffer[_O_Buffer_Size];

    char* _O_pos;



    IO_Tp() : _I_pos(_I_Buffer), _O_pos(_O_Buffer)

    {

        fread(_I_Buffer, 1, _I_Buffer_Size, stdin);

    }



    ~IO_Tp()

    {

        fwrite(_O_Buffer, 1, _O_pos - _O_Buffer, stdout);

    }



    inline bool is_digit(const char ch)

    {

        return '0' <= ch && ch <= '9';

    }

    inline bool is_op(const char ch)

    {

        return ch=='+'||ch=='s';

    }



	inline int getop()

	{

        while (!is_op(*_I_pos))_I_pos++;

        return (*_I_pos++)=='+'?1:0;

	}



    inline int getint()

    {

        int res(0);

        bool neg(false);

        while (!is_digit(*_I_pos))

            neg = (*_I_pos++) == '-';

        do

            (res *= 10) += (*_I_pos++) & 15;

        while (is_digit(*_I_pos));

        return neg ? -res : res;

    }



    inline IO_Tp& operator>>(int& res)

    {

    	res=getint();

        return *this;

    }

    

    inline IO_Tp& operator>>(LL& res)

    {

    	res=getint();

        return *this;

    }

    

    inline IO_Tp& operator<<(LL n)

    {

        static char _buf[10];

        char* _pos(_buf);

        if (n < 0)

            *_O_pos++ = '-', n = -n;

        do

            *_pos++ = '0' + n % 10;

        while (n /= 10);

        while (_pos != _buf)

            *_O_pos++ = *--_pos;

        return *this;

    }



    inline IO_Tp& operator<<(char ch)

    {

        *_O_pos++ = ch;

        return *this;

    }

}IO;

int n,m;

LL k[100005],a[100005],s[100005];

LL tagn[400005];

bool tag[400005];

LL ff[400005],sum[400005],ss[400005];

#define lc k<<1

#define rc k<<1|1

inline void bt(int l,int r,int k)

{

	if(l==r){ss[k]=ff[k]=a[l]-s[l-1];return;}

	int mid=l+r>>1;

	bt(l,mid,lc);

	bt(mid+1,r,rc);

	ff[k]=max(ff[lc],ff[rc]);

	ss[k]=ss[lc]+ss[rc];

}

inline void modi(int l,int r,int k,LL p)

{

	tag[k]=1;

	tagn[k]=p;

	ff[k]=p;

	ss[k]=p*(r-l+1);

}

inline void pushdown(int l,int r,int k)

{

	if(tag[k])

	{

		int mid=l+r>>1;

		modi(l,mid,lc,tagn[k]);

		modi(mid+1,r,rc,tagn[k]);

		tag[k]=0;

	}

}

inline LL query(int l,int r,int k,int p,LL del)

{

	//cout<<l<<' '<<r<<' '<<ff[k]<<endl;

	if(l==r)return (ss[k]+=del,ff[k]+=del);

	pushdown(l,r,k);

	int mid=l+r>>1;

	LL ans;

	if(p<=mid)ans=query(l,mid,lc,p,del);

	else ans=query(mid+1,r,rc,p,del);

	ss[k]=ss[lc]+ss[rc];

	ff[k]=max(ff[lc],ff[rc]);

	return ans;

}

inline void modify(int l,int r,int l1,int r1,int k,LL p)

{

	if(l==l1&&r==r1){modi(l,r,k,p);return;}

	pushdown(l,r,k);

	int mid=l+r>>1;

	if(r1<=mid)modify(l,mid,l1,r1,lc,p);else

	if(l1>mid)modify(mid+1,r,l1,r1,rc,p);else

	modify(l,mid,l1,mid,lc,p),modify(mid+1,r,mid+1,r1,rc,p);

	ss[k]=ss[lc]+ss[rc];

	ff[k]=max(ff[lc],ff[rc]);

}

inline LL maxi(int l,int r,int l1,int r1,int k)

{

	if(l==l1&&r==r1)return ff[k];

	pushdown(l,r,k);

	int mid=l+r>>1;

	if(r1<=mid)return maxi(l,mid,l1,r1,lc);

	if(l1>mid)return maxi(mid+1,r,l1,r1,rc);

	return max(maxi(l,mid,l1,mid,lc),maxi(mid+1,r,mid+1,r1,rc));

}

inline LL qsum(int l,int r,int l1,int r1,int k)

{

	if(l==l1&&r==r1)return ss[k];

	pushdown(l,r,k);

	int mid=l+r>>1;

	if(r1<=mid)return qsum(l,mid,l1,r1,lc);

	if(l1>mid)return qsum(mid+1,r,l1,r1,rc);

	return qsum(l,mid,l1,mid,lc)+qsum(mid+1,r,mid+1,r1,rc);

}

int main()

{

	IO>>n;

	rep(i,1,n)IO>>a[i];

	rep(i,1,n-1)IO>>k[i],s[i]=s[i-1]+k[i],sum[i]=sum[i-1]+s[i-1];

	sum[n]=sum[n-1]+s[n-1];

	a[n+1]=1e16;

	int ti=0;

	bt(1,n+1,1);

    IO>>m;

	while(m--)

	{

		int l,r;

		if(IO.getop())

		{

			IO>>l>>r;

			int i=l,x=r;

			a[i]=query(1,n+1,1,i,x)+s[i-1];

			//cout<<i<<":"<<a[i]<<endl;

			if(i==n)continue;

			l=i+1,r=n+1;

			while(l<r)

			{

				int mid=l+r>>1;

				if(maxi(1,n+1,i+1,mid,1)>=a[i]-s[i-1])r=mid;else l=mid+1;

			}

			if(l>i+1)modify(1,n+1,i+1,l-1,1,a[i]-s[i-1]);

		}else IO>>l>>r,IO<<qsum(1,n+1,l,r,1)+sum[r]-sum[l-1]<<endl;

	}

}



