#include<bits/stdc++.h>

#define fi first

#define se second

using namespace std;

typedef long long LL;

typedef pair<int, int> pii;



const LL lt = -1e18;

const int INF = 0x3f3f3f3f;

const int MXN = 1e5 + 7;



int n, m;

LL ar[MXN], kr[MXN], kk[MXN];

LL sum[MXN<<2], flag[MXN<<2], Max[MXN<<2];

void build(int l, int r, int rt) {

    flag[rt] = lt;

    if(l == r) {

        sum[rt] = ar[l] - kr[l-1];

        Max[rt] = sum[rt];

        return;

    }

    int mid = (l + r) >> 1;

    build(l, mid, rt<<1); build(mid+1, r, rt<<1|1);

    sum[rt] = sum[rt<<1] + sum[rt<<1|1];

    Max[rt] = max(Max[rt<<1], Max[rt<<1|1]);

}

void push_down(int l, int mid, int r, int rt) {

    if(flag[rt] == lt) return;

    flag[rt<<1] = flag[rt];

    flag[rt<<1|1] = flag[rt];

    Max[rt<<1] = flag[rt];

    Max[rt<<1|1] = flag[rt];

    sum[rt<<1] = flag[rt] * (mid-l+1);

    sum[rt<<1|1] = flag[rt] * (r-mid);

    flag[rt] = lt;

}

void update(int L, int R, LL v, int l, int r, int rt) {

    if(L <= l && r <= R) {

        flag[rt] = v;

        Max[rt] = v;

        sum[rt] = v * (r-l+1);

        return;

    }

    int mid = (l + r) >> 1;

    push_down(l, mid, r, rt);

    if(L > mid) update(L,R,v,mid+1,r,rt<<1|1);

    else if(R <= mid) update(L,R,v,l,mid,rt<<1);

    else {

        update(L,mid,v,l,mid,rt<<1);

        update(mid+1,R,v,mid+1,r,rt<<1|1);

    }

    sum[rt] = sum[rt<<1]+sum[rt<<1|1];

    Max[rt] = max(Max[rt<<1], Max[rt<<1|1]);

}

LL query(int L, int R, int l, int r, int rt, int o) {

    if(L > R) {

        if(o == 1) return 0;

        return lt;

    }

    if(L <= l && r <= R) {

        if(o == 1) return sum[rt];

        return Max[rt];

    }

    int mid = (l+r)>>1;

    push_down(l, mid, r, rt);

    if(L > mid) return query(L,R,mid+1,r,rt<<1|1,o);

    else if(R <= mid) return query(L,R,l,mid,rt<<1,o);

    else {

        if(o == 1) return query(L,mid,l,mid,rt<<1,o)+query(mid+1,R,mid+1,r,rt<<1|1,o);

        return max(query(L,mid,l,mid,rt<<1,o),query(mid+1,R,mid+1,r,rt<<1|1,o));

    }

}

int main() {

#ifndef ONLINE_JUDGE

    freopen("E://ADpan//in.in", "r", stdin);

    //freopen("E://ADpan//out.out", "w", stdout);

#endif

    scanf("%d", &n);

    for(int i = 1; i <= n; ++i) scanf("%lld", &ar[i]);

    for(int i = 1; i < n; ++i) scanf("%lld", &kr[i]);

    for(int i = 2; i < n; ++i) kr[i] += kr[i-1];

    for(int i = 1; i < n; ++i) kk[i] = kk[i-1] + kr[i];

    build(1, n, 1);

    int Q; scanf("%d", &Q);

    char s[2]; int l, r;

    while(Q --) {

        scanf("%s%d%d", s, &l, &r);

        if(s[0] == 's') {

            printf("%lld\n", query(l,r,1,n,1,1)+kk[r-1]-(l>=2?kk[l-2]:0));

        }else {

            int L = l, R = n, mid, ans = l;

            ar[l] = query(l,l,1,n,1,1) + r;

            //printf("*%lld\n", ar[l]);

            while(L <= R) {

                mid = (L+R) >> 1;

                //printf("%lld %lld %d\n", ar[l] + kr[mid-1] - (l>=2?kr[l-2]:0), query(mid,mid,1,n,1)+kk[mid-1], mid);

                if(ar[l] >= query(l,mid,1,n,1,0)) {

                    ans = mid;

                    L = mid+1;

                }else R = mid-1;

            }

            //printf("%d\n", ans);

            update(l, ans, ar[l], 1, n, 1);

        }

    }

#ifndef ONLINE_JUDGE

    cout << "time cost:" << clock() << "ms" << "\n";

#endif

    return 0;

}