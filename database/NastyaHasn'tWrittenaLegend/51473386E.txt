#include <bits/stdc++.h>



using namespace std;

using LL = long long int;



LL k[100005];

LL pre[100005], pp[100005];



struct SegmentTree {

    SegmentTree(int n): sz(n) {

        build(1, 1, n);

    }



    void build(int node, int l, int r) {

        lazy[node] = 0;

        if (l == r) {

            cin >> tree[node];

            return;

        }

        int mid = (l + r) / 2;

        build(node*2, l, mid);

        build(node*2+1, mid+1, r);

        pushup(node);

    }



    void pushup(int node) {

        tree[node] = tree[node*2] + tree[node*2+1];

    }



    void pushdown(int node, int l, int mid, int r) {

        if (lazy[node]) {

            lazy[node*2] = lazy[node];

            lazy[node*2+1] = lazy[node];

            tree[node*2] = (mid - l + 1) * lazy[node*2] + pp[mid - 1] - pp[l - 2];

            tree[node*2+1] = (r - (mid+1) + 1) * lazy[node*2+1] + pp[r - 1] - pp[(mid+1) - 2];

            lazy[node] = 0;

        }

    }



    void update(int l, int r, LL val) {

        update(1, 1, sz, l, r, val);

    }



    void update(int node, int L, int R, int l, int r, LL val) {

        if (l <= L and R <= r) {

            lazy[node] = val;

            tree[node] = (R - L + 1) * val + pp[R - 1] - pp[L - 2];

            //cout << L << " " << R << " " << lazy[node] << " " << tree[node] << endl;

            return;

        }

        int mid = (L + R) / 2;

        pushdown(node, L, mid, R);

        if (l <= mid) update(node*2, L, mid, l, r, val);

        if (mid + 1 <= r) update(node*2+1, mid+1, R, l, r, val);

        pushup(node);

    }



    LL query(int l, int r) {

        return query(1, 1, sz, l, r);

    }



    LL query(int node, int L, int R, int l, int r) {

        if (l <= L and R <= r) return tree[node];

        int mid = (L + R) / 2;

        pushdown(node, L, mid, R);

        LL res = 0;

        if (l <= mid) res += query(node*2, L, mid, l, r);

        if (mid + 1 <= r) res += query(node*2+1, mid+1, R, l, r);

        return res;

    }



    LL tree[100005 << 2], lazy[100005 << 2];

    int sz;

};



int main() {

    cin.tie(0);

    cin.sync_with_stdio(0);

    int n;

    cin >> n;

    SegmentTree st(n);

    for (int i = 1; i < n; ++i) cin >> k[i];

    for (int i = 1; i < n; ++i) pre[i] = k[i] + pre[i - 1];

    for (int i = 1; i < n; ++i) pp[i] = pre[i] + pp[i - 1];

    int q;

    cin >> q;

    string s;

    int l, r;

    while (q--) {

        cin >> s >> l >> r;

        if (s[0] == 's') {

            cout << st.query(l, r) << '\n';

        } else {

            int cur = st.query(l, l) + r;

            int ll = l, rr = n;

            while (ll < rr) {

                int mid = (ll + rr) / 2;

                if (cur + pre[mid - 1] - pre[l - 1] > st.query(mid,mid)) ll = mid + 1;

                else rr = mid;

            }

            st.update(l, ll, cur - pre[l - 1]);

        }

    }

}

