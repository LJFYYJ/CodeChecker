//Author:Chacha

//Date:19/03/19



#include<bits/stdc++.h>



using namespace std;



#define ll long long

#define pi acos(-1.0)

#define mod 1000000007



#define _fastio  ios_base:: sync_with_stdio(false); cin.tie(0); cout.tie(0);

#define in_freopen  freopen("in.txt", "r", stdin);

#define out_freopen freopen("out.txt", "w", stdout);



bool is_prime(ll n);

//short int check_prime[90000001]; void sieve(ll Size); //if(check_prime[x]==0) then x is prime

ll pow_of_primes[100][2]; ll primefact(ll n); // pow_of_primes are is 0 index to index k//a[][0] is a prime &a[][1] is powerof that prime

ll phi(ll n); //Euler totient

//ll get_phi[10000006];ll mark[1000006] void sieve_phi(ll n);

ll gcd(ll a, ll b);

ll lcm(ll a, ll b);

ll bigmod(ll b,ll p,ll M);//returns pow(b,p)%M

bool is_coprime(ll a,ll b);

ll modular_inverse_by_primeM(ll b,ll M);//returns b^-1%M

ll modular_inverse_by_coprimeM(ll b,ll M);//returns b^-1%M









int main(){

    ll n,k;



    scanf("%lld %lld",&n,&k);



    if(n==k||n==1)

        printf("%lld\n",2*(n-1)+2*n);

    else{

        k=min(k,n-k+1);

        printf("%lld\n",2*(k-1)+2*k+(n-k)+2*(n-k)+1);

    }





    return 0;

}









bool is_prime(ll n){//O(root(n))

    bool flag; for(ll i=2;i*i<=n;i++){if(n%i==0) flag=1;} return flag;

}

/*

void sieve(ll Size){//O(nloglog n)//log's base is 2//Size can be 90000000

    long long int i,j;check_prime[0]=1;check_prime[1]=1;check_prime[2]=0;for(i=2;i*i<=Size; ){if(check_prime[i]==0){for(j=i;i*j<=Size;j++){check_prime[i*j]=1;}}if(i==2)i++;else i+=2;}

}

*/

ll primefact(ll n){//O(root(n))

    ll i,cnt,k=0,tempn=n,p;for(i=2;i*i<=tempn;i++){if(n%i==0){cnt=0;while(n%i==0){cnt++;n/=i;}pow_of_primes[k][0]=i;pow_of_primes[k][1]=cnt;k++;}}if(n!=1){pow_of_primes[k][0]=n;pow_of_primes[k][1]=1;p=1;}if(p==1)return k;else return k-1;

}

ll phi(ll n){//O(root n)

    ll k=primefact(n);ll ans=n;

    for(ll i=0;i<=k;i++){

        while(n%pow_of_primes[i][0]==0)

            n/=pow_of_primes[i][0];

        ans=(ans-(ans/pow_of_primes[i][0]));

    }

    if(n>1)

        ans-=(ans/n);

    return ans;

}

/*

void sieve_phi(ll n){//O(n)

 ll i,j;  for (i=1;i<=n;i++) get_phi[i]=i; get_phi[1]=1; mark[1]=1; for(i=2;i<=n;i+=2){ if(i!=2) mark[i]=1; get_phi[i]=get_phi[i]/2;} for(i=3;i<=n;i+=2) if(!mark[i]){get_phi[i]= get_phi[i]-1;for(j=2*i;j<=n;j+=i) {mark[j]=1; get_phi[j]=get_phi[j]/i*(i-1);}}

 }

*/

ll gcd(ll a, ll b){//O(100-150)for any ll a & b

    if(b==0) return a; return gcd(b,a%b);

}

ll lcm(ll a,ll b){//O(100-150) for any ll a & b

    ll x=gcd(a,b); return (a*b)/x;

}

ll bigmod(ll b,ll p,ll M){//O(log p)//log's base is 2

    if(p==0) return 1%M; ll x=bigmod(b,p/2,M); x=(x*x)%M; if(p%2==1) x=(x*b)%M; return x;

}

bool is_coprime(ll a,ll b){//O(100-150)

    if(gcd(a,b)==1)return 1;else return 0;

}

ll modular_inverse_by_primeM(ll b,ll M){//O(root b) because of bigmod//finds b^-1%M where b& M both prime

    ll ans=bigmod(b,M-2,M); return ans;

}

ll modular_inverse_by_coprimeM(ll b,ll M){//O(root b) because of bigmod//finds b^-1%M where b& M co prime to each other

    return bigmod(b,phi(M)-1,M);

}

