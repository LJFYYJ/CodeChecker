#include<bits/stdc++.h>

 

using namespace std;



#define fast_cin() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);

#define MAX 1000000

#define ll long long

#define db double

#define pb push_back

#define For(i,s,e) for (ll i=(s); i<(e); i++)

#define Debug_array(a,n) for (ll i=(0); i<(n); i++) cout<<a[i]<<" "

#define Foe(i,s,e) for (ll i=(s); i<=(e); i++)

#define Fod(i,s,e) for (ll i=(s)-1; i>=(e); i--)

#define all(v) v.begin(),v.end()

#define vll vector<ll>

#define vs vector<string>



#define mapll map<ll,ll>

#define mapss map<string,string>

#define mapsl map<string,ll>

#define mapls map<ll,string>



#define pll pair<ll,ll>

#define pss pair<string,string>

#define psl pair<ll,string>

#define pls pair<string,ll>



#define minheap priority_queue<ll>

#define maxheap priority_queue<ll,vector<ll> ,greater<ll>>



#define ff first

#define ss second

#define endl "\n"

#define mp make_pair

#define big_prime 15486277

#define bigger_prime 179424697

#define biggest_prime 32416188691

const ll mod=1e9 + 7;





ll takemod(ll a) {

    return ((a%mod)+mod)%mod;

}



ll gcd(ll a, ll b) { 

    if (b == 0) 

        return a; 

    return gcd(b, a % b);        

}



ll fast_exp(ll base, ll expo) {

    ll res=1;

    while(expo>0) {

        if(expo&1) res=(res*base)%mod;

        base=(base*base)%mod;

        expo>>=1;}

    return res;

}



ll modinv(ll a) {

    return takemod(fast_exp(takemod(a), mod-2));

}



multiset<ll> graph[300001];

ll n,m;

ll arrangement[300001];

ll currpos;

ll arr1[300001];

signed main() 

{

    fast_cin();

    memset(arr1,0,sizeof(arr1));

    cin>>n>>m;

    For(i,0,n)

    {

        ll a;

        cin>>a;

        arrangement[i]=a;

    }

    For(i,0,m)

    {

        ll a,b;

        cin>>a>>b;

        graph[a].insert(b);

        if(b==arrangement[n-1])

            arr1[a]=1;

    }

    multiset<ll> ans;

    Fod(i,n,0)

    {

        if(arr1[arrangement[i]]==1)

        {

            //cout<<arrangement[i]<<"Yo"<<endl;

            ll flag=0;

            multiset <ll, greater <ll> > :: iterator index1;

            multiset <ll, greater <ll> > :: iterator index2;

            index1=graph[arrangement[i]].begin();

            index2=ans.begin();

            while(index1!=graph[arrangement[i]].end() and index2!=ans.end())

            {

                if(*index1==*index2)

                {

                    index1++;

                    index2++; 

                }

                else if(*index1>*index2)

                {

                    flag=1;

                    break;

                }

                else

                    index2++;

            }

            if(index2!=ans.end())

                flag=1;

            if(flag==1)

                ans.insert(arrangement[i]);

        }

        else

            ans.insert(arrangement[i]);

        //cout<<ans.size()<<endl;

    }

    cout<<n-ans.size()<<endl;

    return 0;    

}