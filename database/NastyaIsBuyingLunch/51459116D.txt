#include <iostream>

#include <vector>

#include <algorithm>

using namespace std;



int n, m, p[300001];



void swap(int a, int b) {

    int temp = p[a];

    p[a] = p[b];

    p[b] = temp;

    return;

}



int main(void)

{

    cin >> n >> m;

    for (int i = 0; i < n; i++) cin >> p[i];

    vector< int > valid[n + 1];

    bool jump[n + 1] = {};

    for (int i = 0; i < m; i++) {

        int u, v;

        cin >> u >> v;

        valid[u].push_back(v);

        if (v == p[n - 1]) jump[u] = true;

    }

    for (int i = 1; i <= n; i++) sort(valid[i].begin(), valid[i].end());



    int ans = 0, pos = n - 1;

    bool done = false;

    while (1) {

        if (pos == 0) done = true;

        if (done) break;



        if (jump[p[pos - 1]]) {

            swap(pos - 1, pos);

            ans++;

            pos--;

        } else {

            int now = pos - 1;

            while (1) {

                if (now == 0) {

                    done = true;

                    break;

                }

                bool can_swap = false;

                if (jump[p[now - 1]]) {

                    int L = 0, R = valid[p[now - 1]].size() - 1;

                    while (L <= R) {

                        int M = (L + R) / 2;

                        if (valid[p[now - 1]][M] > p[now]) {

                            R = M - 1;

                        } else if (valid[p[now - 1]][M] < p[now]) {

                            L = M + 1;

                        } else {

                            can_swap = true;

                            break;

                        }

                    }

                }

                if (can_swap) {

                    swap(now - 1, now);

                    break;

                } else {

                    now--;

                }

            }

        }

    }



    cout << ans;



    return 0;

}