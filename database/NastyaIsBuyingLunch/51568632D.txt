#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>
 
using namespace __gnu_pbds;
using namespace std;

typedef long double ld;
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

template<typename has_less>
using ordered_set =
tree<has_less,
	null_type,
	less<has_less>,
	rb_tree_tag,
	tree_order_statistics_node_update>;

#define pb push_back
#define F first
#define S second
#define ALL(v) v.begin(),v.end()
#define fast_cin() ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);

typedef long long ll;
typedef long double ld;
typedef pair <ll,ll> pll;
typedef pair <int,int> pii;

#define TRACE
#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

bool bit(int n, int i) { return (n >> i) & 1; }

int faltu;

const int mod = 1e9+7;
const ll inf = 5e18;
const int N = 3e5 + 100;

int n, m, p[N], nxt[N];
map <pii, int> mp;

int main()
{
	fast_cin();
	srand(time(0));

	cin >> n >> m;
	for(int i = 1; i <= n; i++) {
		cin >> p[i];
		nxt[i] = i + 1;
	}
	for(int i = 0; i < m; i++) {
		int x, y;
		cin >> x >> y;
		mp[{x, y}] = 1;
	}
	int last = p[n], ans = 0;
	for(int ii = n - 1; ii >= 1; ii--) {
		int i = ii;
		int x = p[i], y = p[nxt[i]];
		if(mp.find({x, last}) == mp.end()) {
			continue;
		}
		while(y != last and mp.find({x, y}) != mp.end()) {
			trace(i, x, y);
			i = nxt[i];
			y = p[nxt[i]];
			trace(i, x, y);
		}
		if(y == last) {
			ans++;
			nxt[ii - 1] = nxt[ii];
		}
	}
	cout << ans << endl;


	return 0;
}